"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const path = __importStar(require("path"));
const pg_promise_1 = require("pg-promise");
function loadQueryFile(file) {
    const fullPath = path.join(__dirname, file);
    const options = {
        minify: true,
        params: {
            schema: "public",
        },
    };
    const qf = new pg_promise_1.QueryFile(fullPath, options);
    if (qf.error) {
        console.error(qf.error);
    }
    return qf;
}
function up(pgp) {
    return __awaiter(this, void 0, void 0, function* () {
        const create = loadQueryFile("create.sql");
        yield pgp.none(create);
    });
}
exports.up = up;
function reset(pgp) {
    return __awaiter(this, void 0, void 0, function* () {
        const truncate = loadQueryFile("truncate.sql");
        yield pgp.none(truncate);
    });
}
exports.reset = reset;
