"use strict";
var __awaiter = (this && this.__awaiter) || function (thisArg, _arguments, P, generator) {
    return new (P || (P = Promise))(function (resolve, reject) {
        function fulfilled(value) { try { step(generator.next(value)); } catch (e) { reject(e); } }
        function rejected(value) { try { step(generator["throw"](value)); } catch (e) { reject(e); } }
        function step(result) { result.done ? resolve(result.value) : new P(function (resolve) { resolve(result.value); }).then(fulfilled, rejected); }
        step((generator = generator.apply(thisArg, _arguments || [])).next());
    });
};
var __importDefault = (this && this.__importDefault) || function (mod) {
    return (mod && mod.__esModule) ? mod : { "default": mod };
};
var __importStar = (this && this.__importStar) || function (mod) {
    if (mod && mod.__esModule) return mod;
    var result = {};
    if (mod != null) for (var k in mod) if (Object.hasOwnProperty.call(mod, k)) result[k] = mod[k];
    result["default"] = mod;
    return result;
};
Object.defineProperty(exports, "__esModule", { value: true });
const dockerode_1 = __importDefault(require("dockerode"));
const massive_1 = __importDefault(require("massive"));
const MassiveActionHandler_1 = require("./MassiveActionHandler");
const JsonActionReader_1 = require("../../readers/testing/JsonActionReader");
const blockchain_json_1 = __importDefault(require("./testHelpers/blockchain.json"));
const migrate = __importStar(require("./testHelpers/migrate"));
const dockerUtils = __importStar(require("./testHelpers/docker"));
const updaters_1 = __importDefault(require("./testHelpers/updaters"));
const docker = new dockerode_1.default();
const postgresImageName = "postgres:10.4";
const postgresContainerName = "massive-action-handler-test";
const dbName = "demuxmassivetest";
const dbUser = "docker";
const dbPass = "docker";
let db;
function wait(ms) {
    return new Promise((resolve) => {
        setTimeout(resolve, ms);
    });
}
exports.wait = wait;
jest.setTimeout(30000);
beforeAll(() => __awaiter(this, void 0, void 0, function* () {
    yield dockerUtils.pullImage(docker, postgresImageName);
    yield dockerUtils.removePostgresContainer(docker, postgresContainerName);
    yield dockerUtils.startPostgresContainer(docker, postgresImageName, postgresContainerName, dbName, dbUser, dbPass);
    db = yield massive_1.default({
        database: dbName,
        user: dbUser,
        password: dbPass,
    });
    yield migrate.up(db.instance);
    yield db.reload();
}));
afterAll(() => __awaiter(this, void 0, void 0, function* () {
    yield dockerUtils.removePostgresContainer(docker, postgresContainerName);
}));
describe("MassiveActionHandler", () => __awaiter(this, void 0, void 0, function* () {
    beforeEach(() => __awaiter(this, void 0, void 0, function* () {
        yield migrate.reset(db.instance);
    }));
    it("populates database correctly", () => __awaiter(this, void 0, void 0, function* () {
        const actionReader = new JsonActionReader_1.JsonActionReader(blockchain_json_1.default);
        const actionHandler = new MassiveActionHandler_1.MassiveActionHandler(updaters_1.default, [], db);
        const [block1, isRollback] = yield actionReader.nextBlock();
        yield actionHandler.handleBlock(block1, isRollback, actionReader.isFirstBlock);
        yield wait(500);
        const groceries = yield db.todo.findOne({ id: 1 });
        expect(groceries).toEqual({
            id: 1,
            name: "Groceries",
        });
        const placesToVisit = yield db.todo.findOne({ id: 2 });
        expect(placesToVisit).toEqual({
            id: 2,
            name: "Places to Visit",
        });
        const [block2, isNotRollback] = yield actionReader.nextBlock();
        yield actionHandler.handleBlock(block2, isNotRollback, actionReader.isFirstBlock);
        yield wait(500);
        const cookies = yield db.task.findOne({ name: "cookies" });
        expect(cookies).toEqual({
            id: 5,
            name: "cookies",
            completed: false,
            todo_id: 1,
        });
        const sanFrancisco = yield db.task.findOne({ name: "San Francisco" });
        expect(sanFrancisco).toEqual({
            id: 9,
            name: "San Francisco",
            completed: false,
            todo_id: 2,
        });
        const [block3, alsoNotRollback] = yield actionReader.nextBlock();
        yield actionHandler.handleBlock(block3, alsoNotRollback, actionReader.isFirstBlock);
        yield wait(500);
        const milk = yield db.task.findOne({ name: "milk" });
        const dippedCookies = yield db.task.findOne({ name: "cookies" });
        expect(milk).toEqual({
            id: 4,
            name: "milk",
            completed: true,
            todo_id: 1,
        });
        expect(dippedCookies).toEqual({
            id: 5,
            name: "cookies",
            completed: true,
            todo_id: 1,
        });
        const hongKong = yield db.task.findOne({ completed: true, todo_id: 2 });
        expect(hongKong).toEqual({
            id: 6,
            name: "Hong Kong",
            completed: true,
            todo_id: 2,
        });
    }));
}));
